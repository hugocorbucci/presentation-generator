<section class="main">
  <h1>Presentation Generator</h1>
  <%= form_for @presentation do |f| %>
    <p class="hint">
      Write down one line (sentence or key words) for each slide. Once you are done, click 'Create it'.
      <span id='effect'>A slide with a related image will appear for each line.</span>
    </p>
    <div class="form">
      <%= f.text_area :content, :class => 'presentation'%> <br/>      
    </div>
        
    <button class="rounded" type="submit">
      <span>Create it!</span>
    </button>
  <% end %>
  <% if @presentation.slides.size > 0 %>
    <div id="presentation">
      <div id="tumb">
        <% @presentation.slides.each_with_index do |slide, index| %>
          <div class="tumb">
            <span><%= index+1 %>.</span>
            <div class="tumb_slide">
              <img src="<%= slide.image %>" alt="<%= slide.content %>" />
            </div>
          </div>
        <% end %>
      </div>
      <div id="slides">
        <% @presentation.slides.each do |slide| %>
          <div class="slide" style="background-image: url('<%= slide.image %>');">
            <h1><%= slide.content %></h1>
          </div>
        <% end %>
      </div>
    </div>
  <% end %>
</section>

<script>
	$(document).ready(function() {
	  $('#presentation_content').before('<button id="presentation_preview" class="rounded" name="presentation[preview]" value="true" type="submit"><span>Preview it!</span></button>');
    $('#effect').empty();
    $('#effect').append('A slide with a related image will appear for each line. Use the arrow keys to navigate');
	});

  function update_preview(target) {
    if(isChecked('#presentation_preview > input')) {
      var newValue = target.val();
      $.ajax({
         type: "POST",
         url: "/presentations.js",
         data: {presentation :  {content : newValue}},
         success: function(msg) { json = JSON.parse(msg); ajax_callback(json); }
       });
      // FIXME Bug on Firefox will add text to the end if DOM is manipulated
      // FIXME Non-FF do not send keypress events for delete/backspace
    } else {
      $('#presentation').remove();
    }
  }
  
  function addTextAreaCallback(textArea, delay) {
    var timer = null;
    textArea.keypress(function(e) {
      if (timer) {
        window.clearTimeout(timer);
      }
      timer = window.setTimeout(function(){
        timer = null;
        update_preview(textArea);
      }, delay);
      
      selectCurrentLine(textArea);
    });
  }
  
  function currentLine(area) {
    var value = area.val();
    var lines = value.split('\n');
    var selection = area[0].selectionStart;
    var offset = 0;
    for(var i = 0; i < lines.length; i++) {
      if(offset + lines[i].length + 1 < selection) {
        offset += lines[i].length + 1;
      } else {
        return i;
      }
    }
    return lines.length - 1;
  }
  
  function lineCount(value) {
    return value.split('\n').length;
  }
  
  function ajax_callback(slides) {
    insert_presentation(slides);
    $('.slide').hide();
    selectCurrentLine($("#presentation_content"));
  }
  
  function selectCurrentLine(area) {
    changeTo(function(current) {
      var line = currentLine(area);
      return $($(".slide")[line]);
    });
  }
  
  $(function() {
    var content = $("#presentation_content");
    content.focus();
    
    $('#presentation_preview').replaceWith('<span id="presentation_preview"><input type="checkbox" id="preview" /><label for="preview">Preview presentation</label></span>');
    $('#presentation_preview > input').change(function(){
        update_preview(content);
    });
    
    update_preview(content);
    addTextAreaCallback(content, 500);
  });
</script>
